/// All parameters are mandatory.
{
    "general": {
        "outfile": "outfile.{}.csv", // name of output file. '{}' is a placeholder, and you can
                                     // supply substitution in the command line.
        "gens": 20,                  // number of generations to run (unit N generations)
        "burnin": 0,                 // number of burnin generations (unit N generations)
        "debug": 0,                  // emit allele frequency per 'debug' generations. (0 no output)
        "output per": 0              // frequency of outputting population states
                                     // in the middle of a simulation.  (unit N generations)
    },

    "population": {
        "N": 10000,             // number of individuals
        "loci": 32,             // number of loci

        // Initial genotypes of a population.
        //
        // There are three ways to initialize genotypes of a population at the beginning
        // of a simulation.
        // The simplest is to set a population to be monomorphic.
        "init": "monomorphic",
        // The next is to make all genes unique, so the number of alleles per locus is 2N.
        "init": "unique",
        // Then, the number of alleles can also be used.  In this mode, alleles will have
        // (roughly) equal frequencies.
        "init": 10,
        // Finally, an array of positive number can be used as frequencies of alleles.
        // The frequencies are normalized, so it doesn't have to be sum to one.
        "init": [0.5, 0.8, 0.9, 1.6],

        // Finally, similar to the preivous mode, frequencies of alleles can be specified.
        // Again, each alleles will be equally frequent.
        "init": {
            "type": "frquency",
            "value": 0.125
        },

        "mating": {
            // Mating schemes
            //
            // Mating scheme is specified by "model".  This variable takes one of
            // "pure hermaphroditism", "androdioecy", or "gynodioecy".
            //
            // There are two different ways to specify parameters. The first way is
            // to directly supply s* and auxiliary parameters, and the second way is
            // to supply fundamental biological parameters.
            //
            // The first case: all three schemes take "s*", the proportion of
            // uniparental offspring in surviving offspring.
            // Androdioecy and gynodioecy additionally take 'N_hermaphrodites', the
            // number of hermpaphrodites in a reproducing population. 'N', total
            // number of reproducing organism, must be strictly larger than
            // 'N_hermaphrodites'.
            // Gynodioecy also takes yet another parameter 'H', the proportion of
            // biparental offspring with hermaphroditic seed parent.
            //
            // The second case: as the number of necessary parameters are larger,
            // we provide a list of definitions of all parameters before presenting
            // scheme-specific sets of parameters.
            //
            // - s tilde: fraction of uniparental offspring at conception
            // - tau: rate of survival of uniparental relative to biparental offspring
            // - a: fractioin of seeds of hermaphroditis set by self-pollen
            // - sigma: seed fertility of females relative to hermaphrodites
            // - N_hermaphrodites: number of reproducing hermaphrodites
            //
            // Pure-hermaphroditism needs s tilde and tau
            // Androdioecy needs s tilde, tau, and N_hermaphrodites
            // Gynodioecy needs a, tau, sigma, and N_hermaphrodites
            //
            // Examples for both the first and second cases are shown below:
            //
            // Examples for the first case:

            // For 'pure hermaphroditism'
            "model": "pure hermaphroditism",
            s* = 0.5

            // For 'androdioecy'
            "model": "androdioecy",
            s* = 0.4,
            N_hermaphrodites = 100

            // For 'gynodioecy'
            "model": "gynodioecy",
            s* = 0.3,
            H = 0.2,
            N_hermaprhodites = 200

            // Examples for the second case:

            // For 'pure hermaprhoditism'
            "model": "pure hermaphroditism",
            "s tilde": 0.5,
            "tau": 0.1

            // For 'androdioecy'
            "model": "androdioecy",
            "s tilde": 0.4,
            "tau": 0.2,
            "N_hermaphrodites": 200

            // For 'gynodioecy'
            "model": "gynodioecy",
            "a": 0.2,
            "tau": 0.3,
            "sigma": 0.4,
            "N_hermaphrodites": 100

        },

        // Recommbination probability
        //
        // One rate applies to all loci.
        // The rate is given as a probability of recombination between two adjacent loci
        // per-generation.
        "r": 0.5,

        "mutation": {
            // Mutation model
            //
            // Only the infinite-alleles model is currently supported.

            // The infinite alleles model
            "model": "infinite allele",

            // Scaled mutation rate(s) (4Nmu)
            // There are three ways to specify mutation rates.
            //
            // The first is to use uniform mutation rate across all loci.
            "theta": 0.5,
            // Or, as a list, whose length is equal to the number of loci:
            "theta": [0, 1,..., 31],
            // Or, as a list of named pairs.  The first key, "value" specifies
            // mutation rate, and the second key, "times", specifies the number of
            // repetitions.
            // For example, [{"value": 1, "times": 2}, {"value": 3, "times": 3}] is
            // equal to [1, 1, 3, 3, 3].
            "theta": [{"value": 0.5, "times": 16}, {"value": 1.5, "times": 16}]
        }
    }
}
