/// All parameters are mandatory.
{
    "general": {
        "outfile": "outfile.{}.csv", // name of output file. '{}' is a placeholder, and you can
                                     // supply substitution in the command line.
        "gens": 20,                  // number of generations to run (unit N generations)
        "burnin": 0,                 // number of burnin generations (unit N generations)
        "debug": 0,                  // emit allele frequency per 'debug' generations. (0 no output)
        "output per": 0              // frequency of outputting population states
                                     // in the middle of a simulation.  (unit N generations)
    },

    "population": {
        "N": 10000,             // number of individuals
        "loci": 32,             // number of loci

        // Initial genotypes of a population.
        //
        // There are three ways to initialize genotypes of a population at the beginning
        // of a simulation.
        // The simplest is to set a population to be monomorphic.
        "init": "monomorphic",
        // The next is to make all genes unique, so the number of alleles per locus is 2N.
        "init": "unique",
        // Then, the number of alleles can also be used.  In this mode, alleles will have
        // (roughly) equal frequencies.
        "init": {
            "type": "count",
            "value: 10
        },
        // Finally, similar to the preivous mode, frequencies of alleles can be specified.
        // Again, each alleles will be equally frequent.
        "init": {
            "type": "frquency",
            "value": 0.125
        },

        "mating": {
            // Mating scheme
            //
            // Mating type is specified by "model", and it takes one of
            // "pure hermaphrodite", "androdioecy", or "gynodioecy".
            // Depending on a specific model, up to three additional parameters
            // are needed.

            // List of parameters
            // a: proportion of self-fertilized eggs by hermaphrodites
            // sigma: proportion of successful fertilization of unfertilized eggs by
            //        two parents
            // tau: viability of uniparental offspring relative to biparental offspring

            // For 'pure hermaphrodite" model, sigma is not required.
            "model": "pure hermaphrodite",
            "a": 0.4,
            "tau": 0.5
            // s = 0.5

            // For 'androdioecy' model, all three parameters are required.
            "model": "androdioecy",
            "a": 0.4,
            "sigma": 0.33333,
            "tau": 0.5
            // s_A = 0.5

            // For 'gynodioecy' model, all three parameters are required.
            "model": "gynodioecy",
            "a": 0.8,
            "sigma": 0.3,
            "tau": 0.625
            // s_G = 0.5
            // H = 0.4

        },

        // Recommbination probability
        //
        // One rate applies to all loci.
        // The rate is given as a probability of recombination between two adjacent loci
        // per-generation.
        "r": 0.5,

        "mutation": {
            // Mutation model
            //
            // Supported models are the infinite alleles and sites models.
            // Note that code for the infinite sites model is not well tested, and its use
            // is not recommended.

            // The infinite alleles model
            "model": "infinite allele",

            // Scaled mutation rate(s) (4Nmu)
            // There are three ways to specify mutation rates.
            //
            // The first is to use uniform mutation rate across all loci.
            "theta": 0.5,
            // Or, as a list, whose length is equal to the number of loci:
            "theta": [0, 1,..., 31],
            // Or, as a list of named pairs.  The first key, "value" specifies
            // mutation rate, and the second key, "times", specifies the number of
            // repetitions.
            // For example, [{"value": 1, "times": 2}, {"value": 3, "times": 3}] is
            // equal to [1, 1, 3, 3, 3].
            "theta": [{"value": 0.5, "times": 16}, {"value": 1.5, "times": 16}]
        }
    }
}
