# -*- mode: python; coding: utf-8; -*-

# infinite_sites.py - Implements simulations of partially linked pair
# of loci under the infinite sites model.

# Copyright (C) 2013 Seiji Kumagai

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import csv, sys
import simuOpt
simuOpt.setOptions(alleleType='binary')
import simuPOP as simu

import partial_selfing.common as cf

def get_pure_hermaphrodite_mating(r_rate, weight, size, loci, allele_length, field='self_gen'):
    """
    Construct mating scheme for pure hermaphrodite with partial selfing under the
    infinite sites model.

    A fraction, 0 <= weight <= 1, of offspring is generated by selfing, and others are
    generated by outcrossing.  In this model, there is no specific sex so that any
    individual can mate with any other individuals in a population.
    Furthermore, a parent can participate in both selfing and outcrossing.
    """
    # Index of sites, after which recombinations happen.
    rec_loci = [allele_length * i - 1 for i in range(1, loci + 1)]
    selfing = simu.SelfMating(ops = [simu.Recombinator(rates = r_rate,
                                                       loci = rec_loci),
                                     cf.MySelfingTagger(field)],
                              weight = weight)

    outcross = simu.HomoMating(chooser = simu.PyParentsChooser(generator = cf.pickTwoParents),
                               generator = simu.OffspringGenerator(
                                   ops = [simu.Recombinator(rates = r_rate,
                                                            loci = rec_loci),
                                          cf.MyOutcrossingTagger(field)]),
                               weight = 1.0 - weight)

    return simu.HeteroMating(matingSchemes = [selfing, outcross],
                               subPopSize = size)


def get_androdioecious_mating(r_rate, weight, size, sex_ratio, loci, allele_length, field='self_gen'):

    sexMode = (simu.PROB_OF_MALES, sex_ratio)

    rec_loci = [allele_length * i - 1 for i in range(1, loci + 1)]

    selfing = simu.SelfMating(ops = [simu.Recombinator(rates = r_rate,
                                                       loci = rec_loci),
                                     cf.MySelfingTagger(field)],
                              sexMode = sexMode,
                              subPops = [(0, 1)],
                              weight = weight)

    outcross = simu.RandomMating(ops = [simu.Recombinator(rates = r_rate,
                                                          loci = rec_loci)],
                                 sexMode = sexMode,
                                 weight = weight)

    return simu.HeteroMating(matingSchemes = [selfing, outcross],
                             subPopSize = size)


def get_gynodioecious_mating(r_rate, weight, size, sex_ratio, loci, allele_length, field='self_gen'):

    sexMode = (simu.PROB_OF_MALES, sex_ratio)

    rec_loci = [allele_length * i - 1 for i in range(1, loci + 1)]

    selfing = simu.SelfMating(ops = [simu.Recombinator(rates = r_rate,
                                                       loci = rec_loci)],
                              sexMode = sexMode,
                              subPops = [(0, 0)],
                              weight = weight)

    outcross = simu.RandomMating(ops = [simu.Recombinator(rates = r_rate,
                                                          loci = rec_loci)],
                                 sexMode = sexMode,
                                 weight = weight)

    return simu.HeteroMating(matingSchemes = [selfing, outcross],
                             subPopSize = size)


def get_mutation_operator(m_rate, loci, allele_length, nrep, burnin):
    class MyMutator(simu.PyOperator):
        """
        A mutation operator representing the infinite sites model.

        A new mutation occurs at a distinct site from any previous mutated sites.
        """
        def __init__(self):
            self.available = list(list(range(i * allele_length, (i + 1) * allele_length)
                                       for i in range(loci))
                                  for r in range(nrep))
            super(MyMutator, self).__init__(func = self.mutate)


        def mutate(self, pop):
            """Add mutations to organisms."""
            rng = simu.getRNG()

            dvars = pop.dvars()
            rep = dvars.rep
            gen = dvars.gen - burnin

            for i, ind in enumerate(pop.individuals()):
                for locus in range(loci):
                    for ploidy in range(2):
                        if rng.randUniform() < m_rate[locus]:
                            try:
                                idx = self.available[rep][locus].pop()
                            except IndexError:
                                if self.reclaim(pop, rep, locus):
                                    idx = self.available[rep][locus].pop()
                                else:
                                    sys.stderr.write(
                                        '[ERROR] rep={}, gen={}: available sites exhausted.\n'.
                                        format(rep, gen - burnin))
                                    return False

                            # A site is represented by 1 bit.  An
                            # ancestral state is always represented by
                            # 0, and mutated state is therefore always
                            # 1.
                            ind.setAllele(1, idx, ploidy = ploidy)
            return True


        def reclaim(self, pop, rep, locus):
            """
            Scan and reuse monomorphic sites.

            A new mutation uses up one available site/locus.  After enough mutations
            appear in a population, a simulation exhausts all sites/loci.  However,
            some of such mutations may be either extinct from or fixed in a current
            population.  Extinct mutations will never come back to the population, and
            fixed mutations likewise never returns to ancestral states.  Therefore,
            those sites occupied by such mutations can be freed and reused.  This method
            scans all sites to find monomorphic sites.  Once the monomorphic sites are
            identified, those sites are re-initialized and registered to a list of all
            available sites.
            """
            start = locus * allele_length
            raw_geno = list(pop.genotype())
            stride = loci * allele_length
            available = [loc for loc in range(start, start + allele_length)
                         if len(set(raw_geno[loc::stride])) == 1]

            if len(available) == 0:
                # Even after scanning all sites, there is no unused site.
                return False

            # Re-initialize newly freed sites by setting their values 0.
            for ind in pop.individuals():
                for site in available:
                    ind.setAllele(0, site, ploidy = 0)
                    ind.setAllele(0, site, ploidy = 1)
            self.available[rep][locus] = available


    return MyMutator()


def get_output_operator(args, field = 'self_gen'):
    output = args.OUTFILE
    output_per = args.output_per
    burnin = args.burnin
    loci = args.NUM_LOCI
    allele_length = args.allele_length

    data = ['infinite sites',
            args.NUM_IND,
            args.NUM_GEN,
            args.NUM_REP,
            loci,
            args.M_RATE,
            args.S_RATE,
            args.R_RATE,
            burnin]

    header = ['mutation model',
              'number of individuals',
              'number of generations',
              'number of replicates',
              'number of loci',
              'mutation rate',
              'selfing rate',
              'recombination rate',
              'number of burnin generations']

    if args.model != 'pure-hermaphrodite':
        data.append(args.sex_ratio)
        header.append('sex ratio')

    header.extend(['replicate',
                   'generation',
                   'individual',
                   'number of selfing',
                   'chromosome'] + ['locus {}'.format(i) for i in range(loci)])

    """Output genetic information of a population."""

    class MyWriter(simu.PyOperator):
        """A class handling output of genetic information of the entire population."""

        def __init__(self):

            # Allele length is the only parameter that will not be
            # printed.  This variable controls the assignment of
            # sites, which can hold polymorphic sites, and it is
            # there for strictly an implementation reason (albeit user
            # configurable).

            with open(output, 'w') as f:
                writer = csv.DictWriter(f, header)
                writer.writeheader()

            if output_per > 0:
                ats = [i + burnin for i in range(0, ngen, output_per)]
                super(MyWriter, self).__init__(func = self.write, at = ats)
            else:
                super(MyWriter, self).__init__(func = self.write)

        def write(self, pop):
            # In order to keep output file structure simple, all
            # information regarding to simulation such as model
            # parameters are included into each row.  This obviously
            # caused repetition of simulation-wide parameters many
            # times and excessive use of storage space.  However, I
            # consider an upside, the simplicity of the output file
            # structure, is well worth the cost.

            with open(output, 'a') as f:
                dvars = pop.dvars()
                rep = dvars.rep
                gen = dvars.gen - burnin

                writer = csv.DictWriter(f, header)

                # scan genotype of all individuals to identify
                # polymorphic sites.

                # convert to carray to list because I want to use
                # slice
                raw_geno = list(pop.genotype())
                stride = loci * allele_length
                poly_sites = [locus for locus in range(stride)
                              if len(set(raw_geno[locus::stride])) > 1]
                poly_sites = [[i for i in poly_sites
                               if j * allele_length <= i < (j + 1) * allele_length]
                              for j in range(loci)]

                for idx, ind in enumerate(pop.individuals()):
                    for ploidy in range(2):
                        geno = ind.genotype(ploidy = ploidy)
                        geno = [''.join(str(site) for site in locus)
                                for locus in poly_sites]

                        writer.writerow({key: value for key, value in
                                         zip(header,
                                             data + [rep, gen, idx, ploidy] + geno)})

            return True

    return MyWriter()


def execute(args, pop, mating_op):
    """Configure and run simulations."""


    init_genotype_op = cf.get_init_genotype()
    init_info_op = cf.get_init_info()

    mutation_op = get_mutation_operator(m_rate = args.M_RATE,
                                        loci = args.NUM_LOCI,
                                        allele_length = args.allele_length,
                                        nrep = args.NUM_REP,
                                        burnin = args.burnin)

    output_op = get_output_operator(args)

    simulator = simu.Simulator(pops = pop, rep = args.NUM_REP)

    if args.debug > 0:
        post_op = [simu.Stat(alleleFreq=simu.ALL_AVAIL, step=args.debug),
                   simu.PyEval(r"'%s\n' % alleleFreq", step=args.debug)]
    else:
        post_op = []

    if args.output_per > 0:
        post_op.append(output_op)

    simulator.evolve(
        initOps = [init_info_op, init_genotype_op],
        preOps = mutation_op,
        matingScheme = mating_op,
        postOps = post_op,
        finalOps = output_op,
        gen = args.NUM_GEN + args.burnin)


def pure_hermaphrodite(args):
    pop = cf.get_population(size = args.NUM_IND,
                            loci = args.NUM_LOCI * args.allele_length)

    mating_op = get_pure_hermaphrodite_mating(r_rate = args.R_RATE,
                                              loci = args.NUM_LOCI,
                                              allele_length = args.allele_length,
                                              weight = args.S_RATE,
                                              size = args.NUM_IND)

    execute(args, pop, mating_op)


def androdioecy(args):
    pop = cf.get_population(size = args.NUM_IND,
                            loci = args.NUM_LOCI * args.allele_length)

    simu.initSex(pop, maleFreq = args.sex_ratio)
    pop.setVirtualSplitter(simu.SexSplitter())

    mating_op = get_androdioecious_mating(r_rate = args.R_RATE,
                                          loci = args.NUM_LOCI,
                                          allele_length = args.allele_length,
                                          weight = args.S_RATE,
                                          size = args.NUM_IND,
                                          sex_ratio = args.sex_ratio)

    execute(args, pop, mating_op)


def gynodioecy(args):
    pop = cf.get_population(size = args.NUM_IND,
                            loci = args.NUM_LOCI * args.allele_length)

    simu.initSex(pop, maleFreq = args.sex_ratio)
    pop.setVirtualSplitter(simu.SexSplitter())

    mating_op = get_gynodioecious_mating(r_rate = args.R_RATE,
                                         loci = args.NUM_LOCI,
                                         allele_length = args.allele_length,
                                         weight = args.S_RATE,
                                         size = args.NUM_IND,
                                         sex_ratio = args.sex_ratio)

    execute(args, pop, mating_op)



def run(args):
    if args.model == 'androdioecy':
        androdioecy(args)
    elif args.model == 'gynodioecy':
        gynodioecy(args)
    else:
        pure_hermaphrodite(args)
